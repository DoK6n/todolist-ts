{"version":3,"sources":["hooks/itemsContext.tsx","components/Header.tsx","components/Item.tsx","components/Content.tsx","components/Create.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialTodos","key","text","done","reducer","state","action","type","nextId","Math","max","map","todo","console","log","concat","filter","Error","ItemsContext","createContext","ItemsDispatchContext","ItemsProvider","children","useReducer","todos","dispatch","Provider","value","useItemState","useContext","useItemDispatch","Title","styled","div","Increase","span","props","color","Header","count","length","React","memo","ItemBlock","Delete","Line","Item","onClick","ItemList","Content","Input","input","Footer","placeholder","onKeyPress","e","target","GlobalStyle","createGlobalStyle","Template","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aa0d794.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer, Dispatch } from 'react';\r\n\r\nconst initialTodos: IItem[] = [\r\n  {\r\n    key: 1,\r\n    text: ' 배민커넥트 하기',\r\n    done: true\r\n  },\r\n  {\r\n    key: 2,\r\n    text: '리액트 + 타입스크립트 공부하기',\r\n    done: true\r\n  },\r\n  {\r\n    key: 3,\r\n    text: '토이 프로젝트 하기',\r\n    done: false\r\n  },\r\n  {\r\n    key: 4,\r\n    text: 'Git 공부하기',\r\n    done: false\r\n  },\r\n  {\r\n    key: 5,\r\n    text: '코테 1일 1문제',\r\n    done: false\r\n  }\r\n];\r\n\r\nexport interface IItem {\r\n  key: number;\r\n  text: string;\r\n  done: boolean;\r\n}\r\n\r\ntype Action =\r\n  | { type: 'CREATE'; text: string }\r\n  | { type: 'TOGGLE'; key: number }\r\n  | { type: 'DELETE'; key: number };\r\n\r\ntype ItemDispatch = Dispatch<Action>;\r\n\r\nfunction reducer(state: IItem[], action: Action): IItem[] {\r\n  switch (action.type) {\r\n    case 'CREATE': {\r\n      const nextId =\r\n        Math.max(\r\n          0,\r\n          ...state.map(todo => {\r\n            console.log(todo);\r\n            return todo.key;\r\n          })\r\n        ) + 1;\r\n      return state.concat({ key: nextId, text: action.text, done: false });\r\n    }\r\n    case 'TOGGLE':\r\n      return state.map(todo => (todo.key === action.key ? { ...todo, done: !todo.done } : todo));\r\n    case 'DELETE':\r\n      return state.filter(todo => todo.key !== action.key);\r\n    default:\r\n      throw new Error('unahdled action type');\r\n  }\r\n}\r\n\r\nconst ItemsContext = createContext<IItem[] | null>(null);\r\nconst ItemsDispatchContext = createContext<ItemDispatch | null>(null);\r\n\r\nexport function ItemsProvider({ children }: { children: React.ReactNode }) {\r\n  const [todos, dispatch] = useReducer(reducer, initialTodos);\r\n\r\n  return (\r\n    <ItemsDispatchContext.Provider value={dispatch}>\r\n      <ItemsContext.Provider value={todos}>{children}</ItemsContext.Provider>\r\n    </ItemsDispatchContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useItemState(): IItem[] {\r\n  const state = useContext(ItemsContext);\r\n  if (!state) throw new Error('ItemsProvider not found');\r\n  return state;\r\n}\r\n\r\nexport function useItemDispatch() {\r\n  const dispatch = useContext(ItemsDispatchContext);\r\n  if (!dispatch) throw new Error('ItemsProvider not found');\r\n  return dispatch;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useItemState } from '../hooks/itemsContext';\r\n\r\nconst Title = styled.div`\r\n  text-align: center;\r\n  font-size: 2em;\r\n  @media (max-width: 480px) {\r\n    font-size: 1.3em;\r\n  }\r\n`;\r\n\r\nconst Increase = styled.span`\r\n  display: inline-block;\r\n  padding: 4px 10px;\r\n  font-size: 75%;\r\n  text-align: center;\r\n  vertical-align: baseline;\r\n  padding-right: 0.5rem;\r\n  padding-left: 0.5rem;\r\n  border-radius: 10rem;\r\n  background-color: ${props => props.color || 'black'};\r\n  color: #dee2e6;\r\n  line-height: 1;\r\n  font-weight: bold;\r\n`;\r\n\r\nfunction Header() {\r\n  const todos = useItemState();\r\n\r\n  const count = todos.filter(todo => !todo.done).length;\r\n\r\n  return (\r\n    <>\r\n      <Title>\r\n        오늘 뭐 하지? <Increase color='#22ca80c9'>{count}개</Increase>\r\n      </Title>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(Header);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { IItem, useItemDispatch } from '../hooks/itemsContext';\r\n\r\ninterface IItemBlockProps {\r\n  done: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\ninterface IItemProps {\r\n  key: number;\r\n  todo: IItem;\r\n}\r\n\r\nconst ItemBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 15px;\r\n  font-size: 15px;\r\n  cursor: pointer;\r\n  text-decoration: line-through;\r\n  text-decoration: ${(props: IItemBlockProps) => (props.done ? 'line-through' : 'none')};\r\n  color: ${(props: IItemBlockProps) => (props.done ? '#999999' : 'black')};\r\n  &:hover {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Delete = styled.div`\r\n  width: 10px;\r\n  font-weight: bold;\r\n  color: #83e7bc;\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: tomato;\r\n  }\r\n`;\r\n\r\nconst Line = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n`;\r\n\r\nfunction Item({ todo }: IItemProps) {\r\n  const dispatch = useItemDispatch();\r\n\r\n  const onClickTodoDone = () => {\r\n    dispatch({ type: 'TOGGLE', key: todo.key });\r\n  };\r\n\r\n  const onClickTodoDelete = () => {\r\n    dispatch({ type: 'DELETE', key: todo.key });\r\n  };\r\n\r\n  return (\r\n    <Line>\r\n      <ItemBlock done={todo.done} onClick={onClickTodoDone}>\r\n        {todo.text}\r\n      </ItemBlock>\r\n      <Delete onClick={onClickTodoDelete}>X</Delete>\r\n    </Line>\r\n  );\r\n}\r\n\r\nexport default React.memo(Item);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Item from './Item';\r\nimport { useItemState } from '../hooks/itemsContext';\r\n\r\nconst ItemList = styled.div`\r\n  height: 80%;\r\n  margin: 30px 0 20px 0;\r\n  overflow-y: auto;\r\n  &::-webkit-scrollbar {\r\n    width: 2px;\r\n    height: 2px;\r\n  }\r\n  &::-webkit-scrollbar-track-piece {\r\n    background-color: #e9ecef;\r\n  }\r\n  &::-webkit-scrollbar-thumb:vertical {\r\n    background: linear-gradient(0deg, #e9ecef, #22ca80c9, #e9ecef);\r\n    border-radius: 8px;\r\n  }\r\n`;\r\n\r\nfunction Content() {\r\n  const todos = useItemState();\r\n\r\n  return (\r\n    <ItemList>\r\n      {todos.map(todo => (\r\n        <Item key={todo.key} todo={todo} />\r\n      ))}\r\n    </ItemList>\r\n  );\r\n}\r\n\r\nexport default React.memo(Content);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useItemDispatch } from '../hooks/itemsContext';\r\n\r\nconst Input = styled.input`\r\n  border-left: none;\r\n  border-right: none;\r\n  border-top: none;\r\n  border-color: #22ca80c9;\r\n  outline: none;\r\n  background-color: transparent;\r\n  font-size: 1.5em;\r\n  padding: 0 0 5px 20px;\r\n  margin: 0 40px 0 40px;\r\n  @media (max-width: 480px) {\r\n    font-size: 0.8em;\r\n    margin: 0 20px 0 20px;\r\n    padding: 0 0 5px 10px;\r\n  }\r\n`;\r\n\r\nfunction Footer() {\r\n  const dispatch = useItemDispatch();\r\n\r\n  const onCreateItem = (e: any) => {\r\n    if (e.key === 'Enter' && e.target.value !== '') {\r\n      dispatch({ type: 'CREATE', text: e.target.value });\r\n      e.target.value = '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Input type='text' placeholder='오늘은...' onKeyPress={onCreateItem} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Header from './components/Header';\nimport Content from './components/Content';\nimport Footer from './components/Create';\nimport { ItemsProvider } from './hooks/itemsContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n  }\n`;\n\nconst Template = styled.div`\n  border-radius: 20px;\n  padding: 20px;\n  width: 50vw;\n  height: 80vh;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 3px 3px 3px 3px #dcdddf;\n`;\n\nfunction App() {\n  return (\n    <ItemsProvider>\n      <GlobalStyle />\n      <Template>\n        <Header />\n        <Content />\n        <Footer />\n      </Template>\n    </ItemsProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}